/*
${license.header.text}
 */
package com.vaadin.addon.jpacontainer.filter;

import com.vaadin.addon.jpacontainer.Filter;

/**
 * Default implementation of {@link JoinFilter}. The QL generated by this filter
 * assumes that the alias of the joined property is the name of the join propery.
 * For example, if the property to be joined is named <code>skills</code>, then the join should
 * look like this: <code>select Person as obj join obj.skills as skills where ...</code>.
 * 
 * @author Petter Holmstr√∂m (Vaadin Ltd)
 * @since 1.0
 */
public class SimpleJoinFilter extends Conjunction implements JoinFilter {

    private String joinProperty;

    protected SimpleJoinFilter(String joinProperty, Filter... filters) {
        super(filters);
        this.joinProperty = joinProperty;
        // TODO Check that join filters are not nested
    }

    public String getJoinProperty() {
        return joinProperty;
    }

	/**
	 * <strong>This implementation does not use <code>propertyIdPreprocessor</code> at all.</strong>
	 * <p>
	 * {@inheritDoc }
	 */
    @Override
    public String toQLString(final PropertyIdPreprocessor propertyIdPreprocessor) {
        return super.toQLString(new PropertyIdPreprocessor() {

            public String process(Object propertyId) {
                StringBuilder sb = new StringBuilder();
                sb.append(getJoinProperty());
                sb.append(".");
                sb.append(propertyId.toString());
                return sb.toString();
            }
        });
    }
}
