# JPAContainer tutorial


## Introduction

* Simple addressbook
* CRUD
  * Show in Table, edit in Form, ComboBox
* filtering
* Maven


## Creating the project

### Using Maven
* Create from archetype (TODO: archetype not yet created)
  $ mvn archetype:generate -DarchetypeGroupId=com.vaadin -DarchetypeArtifactId=vaadin-archetype-jpacontainer -DarchetypeVersion=LATEST -DgroupId=com.example -DartifactId=addressbook -Dversion=1.0 -Dpackaging=war

### New Vaadin project in Eclipse
* New vaadin project
* Add libraries
  * eclipselink-2.2.0.jar
  * javax.persistence-2.0.0.jar
  * h2-1.3.160.jar
  * CustomField add-on


## Implementation

### Data model
* Person.java
  * id
  * firstName
  * lastName
  * street
  * city
  * zipCode
  * phoneNumber
  * department
* Department
  * id
  * name
  * persons
  * parent
  * transient superDepartment to identify leaf nodes

### The Application class
* init() method

### The main view
* extends HorizontalSplitPanel
* firstComponent = buildTree()
  * tree with Department container
* secondComponent = buildMainArea()
  * layout with
    * add/remove/edit buttons
    * filter textfield
    * table with Person container
* Add only tree and table at this point

### Container factory
* Application ThreadLocal pattern to support many users (one factory instance per session, through the application class)
* Container factory creates an EntityManagerFactory, which is used to create an entity manager
* Container factory can create Department and Person containers
* bind tree and table to containers -> test that data shows

### Filtering
* Add filter field with textchangelistener
* TODO: Filtering will change in JPAContainer 2.0

### The Person editor
1. Add the Add/Remove/Edit buttons to the layout
2. First bind the Remove button click listener (easiest)
3. Second bind the Edit button click listener
4. Create the PersonEditor class
  1. Extends window
  2. Accepts Item in constructor
  3. Uses the Item as an ItemDataSource for a Form
5. Test that editing is possible
6. Add a DepartmentSelector to allow selecting departments
  * CustomField with 2 ComboBoxes (geograpical location, department)
  * Geographical select filters department select
7. Test
8. Bind Add button
  * PersonEditor edits new BeanItem<Person>
  * Add EditorSavedListener to PersonEditor
  * Register EditorSavedListener that adds the new entity stored in the BeanItem and commits.
9. Test


TODO: session-per-request / entitymanager-per-request to make lazy loading work with Hibernate